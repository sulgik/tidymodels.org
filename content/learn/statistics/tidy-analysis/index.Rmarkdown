---
title: "상관도와 회귀의 기초사항에 관한 타이디한 데이터 원칙"
tags: [broom]
categories: [statistical analysis]
type: learn-subsection
weight: 1
description: | 
  상관검정과 단순 회귀모델의 결과 분석을 여러 데이터셋에 대해 동시에 수행한다.
---

```{r setup, include = FALSE, message = FALSE, warning = FALSE}
source(here::here("content/learn/common.R"))
```

```{r load, include = FALSE}
library(tidymodels)
pkgs <- c("tidymodels")
theme_set(theme_bw() + theme(legend.position = "top"))
```

## 들어가기

이 장은 tidymodels 패키지만 필요로 합니다.

tidymodels 패키지인 [broom](https://broom.tidyverse.org/) 패키지가 단일 분석 결과를 일관성있는 형태로 요약하는데 유용하지만, 여러 분석결과를 합쳐야하는 high-throuput 을 위해 고안된 것입니다.
합쳐지는 것들은 데이터의 서브그룹, 다른 모델을 사용한 분석들, bootstrap replicates, permutations 등이 될 수 있습니다. 
특별이 이 패키지는 [tidyr](https://tidyr.tidyverse.org/) 의 `nest()/unnest()` 함수들, [purrr](https://purrr.tidyverse.org/) 의 `map()` 함수와 잘 작동합니다.

## 상관 분석

빌트인 데이터셋 `Orange` 으로 한번 살펴봅시다. 
`Orange` 를 `tibble` 로 강제변환하는 것부터 시작해봅시다. 
이렇게하면 더 나은 print 메소드를 제공하는데, 이는 나중에 리스트컬럼으로 작업하기 시작할 때 매우 유용하게 될 것입니다.

```{r}
library(tidymodels)

data(Orange)

Orange <- as_tibble(Orange)
Orange
```

35 개의 관측값들이 다음 3 개의 변수들을 가지고 있습니다: `Tree`, `age`, `circumference`. `Tree` 는 각각 다섯 나무를 의미하는 레벨 가진 팩터형입니다. 예상했듯이, 나이와 둘레길이는 상관관계가 있습니다:

```{r}
cor(Orange$age, Orange$circumference)

library(ggplot2)

ggplot(Orange, aes(age, circumference, color = Tree)) +
  geom_line()
```

각 나무 *내(within)* 에서 개별적으로 상관관계가 있는지 테스트하고 싶다고 하자. 
dplyr 의 `group_by` 로 할 수 있다:

```{r}
Orange %>% 
  group_by(Tree) %>%
  summarize(correlation = cor(age, circumference))
```

(상관도가 취합본에서보다 훨씬 크다는 것과 상관도가 트리마다 비슷하다는 것을 주목하라). 

단순히 상관도를 추정하는 것보다 `cor.test()` 로 가설 검정을 해보자:

```{r}
ct <- cor.test(Orange$age, Orange$circumference)
ct
```

이 테스트 출력에는 관심있는 값들이 많이 있습니다. p-value 와 추정값같이 길이 1 인 벡터도 있고, 신뢰구간과 같이 길이가 긴 것들도 있습니다. `tidy()` 함수를 사용하여 잘 정리된 티블로 만들 수 있습니다:

```{r}
tidy(ct)
```

종종 우리는 데이터의 다른 부분들을 사용하여, 다중 테스트를 수행하거나 다중모델을 적합하는 경우가 있습니다. 이 경우, `nest-map-unnest` 워크플로를 추천합니다. 예를 들어, 각 다른 트리에 대해 상관도 검정을 수행하고 싶다고 해 봅시다. 관심있는 그룹에 기반하여 데이터를 `nest` (중첩) 하는 것부터 시작합니다:

```{r}
nested <- 
  Orange %>% 
  nest(data = c(age, circumference))
```

이제 `purrr::map()` 를 사용하여 각 중첩된 티블에 대해 상관검정을 수행합니다:

```{r}
nested %>% 
  mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)))
```

S3 객체의 리스트컬럼을 출력합니다.
`map()` 으로 각 객체들을 타이디하게 합니다.

```{r}
nested %>% 
  mutate(
    test = map(data, ~ cor.test(.x$age, .x$circumference)), # S3 list-col
    tidied = map(test, tidy)
  ) 
```

마지막으로 타이디하게된 데이터프레임의 중첩을 풀어서 플랫티블로 볼 수 있게 합니다. 전체과정은 다음과 같게 됩니다: 

```{r}
Orange %>% 
  nest(data = c(age, circumference)) %>% 
  mutate(
    test = map(data, ~ cor.test(.x$age, .x$circumference)), # S3 list-col
    tidied = map(test, tidy)
  ) %>% 
  unnest(cols = tidied) %>% 
  select(-data, -test)
```

## 회귀 모델

이런 유형의 워크플로는 회귀모델에 적용될 때 더 유용하게 됩니다. 타이디하지 않은 회귀결과는 다음과 같게 됩니다:

```{r}
lm_fit <- lm(age ~ circumference, data = Orange)
summary(lm_fit)
```

이 결과를 타이디하게 하면, 각 모델에 대해 출력이 여러 행이 됩니다:

```{r}
tidy(lm_fit)
```

이제 여러 회귀들을 정확히 전과 같은 워크플로를 사용하여 한번에 다룰 수 있습니다:

```{r}
Orange %>%
  nest(data = c(-Tree)) %>% 
  mutate(
    fit = map(data, ~ lm(age ~ circumference, data = .x)),
    tidied = map(fit, tidy)
  ) %>% 
  unnest(tidied) %>% 
  select(-data, -fit)
```

여기 `mtcars` 데이터셋에서 보았듯이 회귀의 여러 설명변수를 쉽게 이용할 수 있습니다. 우리는 데이터를 자동변속 vs. 수동변속 (`am` 열) 으로 데이터를 중첩한 뒤 각 중첩된 티블 내에서 회귀를 수행합니다.

```{r}
data(mtcars)
mtcars <- as_tibble(mtcars)  # to play nicely with list-cols
mtcars

mtcars %>%
  nest(data = c(-am)) %>% 
  mutate(
    fit = map(data, ~ lm(wt ~ mpg + qsec + gear, data = .x)),  # S3 list-col
    tidied = map(fit, tidy)
  ) %>% 
  unnest(tidied) %>% 
  select(-data, -fit)
```

우리가 만약 `tidy()` 출력 뿐만 아니라 `augment()` 와 `glance()` 출력까지 원하지만, 각 회귀를 한번만 수행하고 싶다면 어떻게 해야 할까요? 리스트컬럼을 이용하고 있기 때문에, 모델을 한번만 적합하고 다중 리스트열을 사용하여 타이디되고, glance 되고, augment 된 출력을 저장할 수 있습니다.

```{r}
regressions <- 
  mtcars %>%
  nest(data = c(-am)) %>% 
  mutate(
    fit = map(data, ~ lm(wt ~ mpg + qsec + gear, data = .x)),
    tidied = map(fit, tidy),
    glanced = map(fit, glance),
    augmented = map(fit, augment)
  )

regressions %>% 
  select(tidied) %>% 
  unnest(tidied)

regressions %>% 
  select(glanced) %>% 
  unnest(glanced)

regressions %>% 
  select(augmented) %>% 
  unnest(augmented)
```

모든그룹에 대한 추정값들과 p-value 들을 (출력 모델 객체들의 리스트 대신) 같은 타이디한 데이터프레임으로 결합함으로써, 새로운 클래스의 분석과 시각화가 직관적이게 됩니다. 다음을 포함합니다: 

- p-value 나 추정값으로 정렬하여 모든 테스트를 통틀어 가장 유의한 항을 찾음
- p-value 히스토그램
- p-value 를 effect size 추정값과 비교하는 volcano plots.

이들 케이스 각각에서, `terms` 열에 기반하여 쉽게 필터링, facet, 비교할 수 있습니다. 요약하면, 이전에는 타이디한 데이터 분석 도구들이 입력데이터에서만 사용할 수 있었는데, 데이터분석과 모델의 *결과*에도 사용할 수 있게 됩니다.

## Session information

```{r si, echo = FALSE}
small_session(pkgs)
```

