---
title: "부트스트랩 리샘플링과 타이디한 회귀 모델"
tags: [rsample, broom]
categories: [statistical analysis, resampling]
type: learn-subsection
weight: 3
description: | 
  부트스트랩 리샘플링을 적용하여 모델 파라미터에서 불확실성을 추정하기.
---

```{r setup, include = FALSE, message = FALSE, warning = FALSE}
source(here::here("content/learn/common.R"))
```

```{r load, include = FALSE}
library(tidymodels)
pkgs <- c("tidymodels")

theme_set(theme_bw() + theme(legend.position = "top"))
```


## 들어가기

이 장에서는 tidymodels 패키지만 있으면 됩니다.

적합된 모델들을 타이디한 방법으로 결합하면 부트스트래핑이나 퍼뮤테이션 테스트를 하기 편리합니다. 
이러한 방법들은 예를 들면 [Andrew MacDonald](https://rstudio-pubs-static.s3.amazonaws.com/19698_a4c472606e3c43e4b94720506e49bb7b.html)에서 살펴본 적이 있고, [해들리는 dplyr 에 잠재적인 확장으로써 부트스트래핑에 효율적인 서포트를 탐색한 적이 있습니다](https://github.com/hadley/dplyr/issues/269). 
tidymodels 의 [broom 패키지](https://broom.tidyverse.org/) 는 이러한 분석을 할 때 [dplyr](https://dplyr.tidyverse.org/) 에 자연스럽게 녹아듭니다.

부트스트래핑은 데이터셋을 랜덤하게 샘플링한 뒤 각 부트스트랩된 데이터(bootstraped replicate)에 개별적으로 분석을 수행하는 것으로 이루어져 있습니다. 
결과 추정값들의 분산값은 우리 추정값에서의 분산의 좋은 근사값이 됩니다.

`mtcars` 데이터셋에서 무게/마일리지 관계에 비선형 모델을 적합하고 싶다고 해봅시다.

```{r}
library(tidymodels)

ggplot(mtcars, aes(mpg, wt)) + 
    geom_point()
```

`nls()` 함수를 통해 nonlinear least squares 방법으로 모델을 적합할 수 있습니다.

```{r}
nlsfit <- nls(mpg ~ k / wt + b, mtcars, start = list(k = 1, b = 0))
summary(nlsfit)

ggplot(mtcars, aes(wt, mpg)) +
    geom_point() +
    geom_line(aes(y = predict(nlsfit)))
```
이렇게 하면 파라미터의 p-값과 신뢰구간을 얻을 수 있지만, 이들은 실제 데이터에서는 만족하지 않는 모델 가정에 기반한 것입니다.
부트스트래핑은 데이터 성질에 더 로버스트한 신뢰구간과 예측값을 제공하는 널리사용되는 방법입니다.

## 부트스트래핑 모델

rsample 패키지의 `bootstraps()` 함수를 사용하여 부트스트랩 데이터를 샘플할 수 있습니다.
우선, 각 데이터가 복원 랜덤 샘플링된, 2000 개의 부트스트랩 데이터들을 만듭니다. 
결과 객체는 `rset` 인데, `rsplit` 객체들을 하나의 열로 가지고 있는 데이터프레임입니다.

`rsplit` 객체에는 두 개의 메인 구성요소가 있습니다: 분석 데이터셋과 평가 데이터셋이며 각각 `analysis(rsplit)` 과 `assessment(rsplit)` 으로 접근할 수 있습니다. 
부트스트랩 샘플에 대해 분석 데이터셋은 부트스트램 샘플 자체이고, 평가 데이터셋은 out-of-bag 샘플들로 구성됩니다.

```{r}
set.seed(27)
boots <- bootstraps(mtcars, times = 2000, apparent = TRUE)
boots
```

`nls()` 모델을 각 부트스트랩 샘플에 적합하기 위해 도우미 함수를 생성해보고, `purr::map()` 을 이용하여 이 함수를 모든 부트스트랩 샘플들에 한번에 적용해 봅시다.
중첩을 풀어서 타이디한 계수 정보를 가진 열을 생성합니다.

```{r}
fit_nls_on_bootstrap <- function(split) {
    nls(mpg ~ k / wt + b, analysis(split), start = list(k = 1, b = 0))
}

boot_models <-
  boots %>% 
  mutate(model = map(splits, fit_nls_on_bootstrap),
         coef_info = map(model, tidy))

boot_coefs <- 
  boot_models %>% 
  unnest(coef_info)
```

중첩이 풀린 계수 정보에는 하나의 데이터프레임로 결합된 각 데이터의 요약이 들어있습니다:

```{r}
boot_coefs
```

## 신뢰구간

이제 ([백분율 방법](https://www.uvm.edu/~dhowell/StatPages/Randomization%20Tests/ResamplingWithR/BootstMeans/bootstrapping_means.html)이라는 것을 사용하여) 신뢰구간을 계산할 수 있습니다:

```{r percentiles}
percentile_intervals <- int_pctl(boot_models, coef_info)
percentile_intervals
```

히스토그램을 사용하여 각 추정값의 불확실성에 대해 세부사항들을 얻을 수 있습니다:

```{r}
ggplot(boot_coefs, aes(estimate)) +
  geom_histogram(bins = 30) +
  facet_wrap( ~ term, scales = "free") +
  geom_vline(aes(xintercept = .lower), data = percentile_intervals, col = "blue") +
  geom_vline(aes(xintercept = .upper), data = percentile_intervals, col = "blue")
```

rsample 패키지에는 [다른 유형의 신뢰구간](https://tidymodels.github.io/rsample/reference/int_pctl.html) 을 위한 함수들도 있습니다. 

## 가능한 모델 적합

`augment()` 을 사용하여 적합된 곡선에서 불확실성을 시각화할 수 있습니다. 
부트스트랩 샘플이 아주 많기 때문에, 여기에서는 일부만 시각화합니다:

```{r}
boot_aug <- 
  boot_models %>% 
  sample_n(200) %>% 
  mutate(augmented = map(model, augment)) %>% 
  unnest(augmented)

boot_aug
```

```{r}
ggplot(boot_aug, aes(wt, mpg)) +
  geom_line(aes(y = .fitted, group = id), alpha = .2, col = "blue") +
  geom_point()
```

`tidy()` 와 `augment()` 함수가 다양한 통계결과에 사용할 수 있습니다.
따라서, 다른 종류의 예측모델이나 가설검정 모델로 부트스트래핑을 쉽게 수행할 수 있습니다.
데이터에 이차 스무딩 spline 을 적합하는 `smooth.spline()` 을 사용할 수도 있습니다:

```{r}
fit_spline_on_bootstrap <- function(split) {
    data <- analysis(split)
    smooth.spline(data$wt, data$mpg, df = 4)
}

boot_splines <- 
  boots %>% 
  sample_n(200) %>% 
  mutate(spline = map(splits, fit_spline_on_bootstrap),
         aug_train = map(spline, augment))

splines_aug <- 
  boot_splines %>% 
  unnest(aug_train)

ggplot(splines_aug, aes(x, y)) +
  geom_line(aes(y = .fitted, group = id), alpha = 0.2, col = "blue") +
  geom_point()
```



## 세션정보

```{r si, echo = FALSE}
small_session(pkgs)
```
 
 
