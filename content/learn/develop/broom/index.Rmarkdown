---
title: "broom tidier 메소드 만들기"
tags: [broom]
categories: []
type: learn-subsection
weight: 5
description: | 
  새로운 모델 객체에 해당하는 tidy(), glance(), augment() 메소드를 작성한다.
---

```{r setup, include = FALSE, message = FALSE, warning = FALSE}
source(here::here("content/learn/common.R"))
```

```{r load, include = FALSE, message = FALSE, warning = FALSE}
library(tidymodels)
library(tidyverse)
library(generics)
library(kableExtra)
pkgs <- c("tidymodels", "tidyverse", "generics", "usethis")
```

## 들어가기

`r req_pkgs(pkgs)`

broom 패키지의 도구들을 이용하면 타이디한 `tibble()` 에 있는 모델들에 대한 핵심 정보를 요약할 수 있습니다. 이 패키지에는 모델 객체를 다루기 쉽게 만들어 주는 동사, 혹은 "tidiers" 세 개를 제공합니다. 

* `tidy()` 는 모델 컴포넌트들에 대한 정보를 요약합니다
* `glance()` 는 전체 모델에 대한 정보를 보고합니다
* `augment()` 는 관측값들에 대한 정보를 데이터셋에 추가합니다

위의 세 동사들은 모두 _제너릭_ 입니다. 왜냐하면, 이 동사들은 주어진 모델 객체를 타이디하게 하는 프로시져를 정의하지 않는 대신, 특정 모델 객체 관련된 _메서드_ (특별한 유형의 모델 객체를 타이디하게 하기 위해 구현한) 로 리디렉트하기 때문입니다. broom 패키지에는 base R 의 stats 패키지를 포함하여 100 개가 넘는 모델링 패키지에 있는 모델 객체에 적용할 수 있는 메소드들이 있습니다. 하지만, 관리상의 이유로 broom 패키지 저자들은 새로운 메소드 요청이 broom 이 아닌 부모 패키지에 지시될 것을 요구합니다. (즉 해당 모델 객체를 제공한 패키지) 새로운 메소드는 요청자가 모델소유 패키지의 관리자에게 부모 패키지의 tidier 메소드들을 구현해 달라고 요청한 경우에만 broom 에 일반적으로 만들어질 것입니다.

외부 tidier 메소드들을 가능한한 가장 힘들지 않게 구현하려고 합니다. 일반적인 과정은 다음과 같습니다:

* tidier 제네릭을 다시 익스포트하기
* tidy 메소드를 구현하기
* 새 메소드를 문서화하기

이번 문서에서는 위에서 언급한 각 단계를 자세히 따라가면서 예를 살펴보고 도움이 되는 함수들을 볼 것입니다.

##  tidier 제네릭을 다시 익스포트하기

첫번째 단계는 `tidy()`, `glance()`, `augment()` 에 대한 제네릭 함수들을 다시 익스포트 하는 것입니다. `broom` 에서 직접할 수도 있지만, `generics` 으로 부르는 더 가벼운 의존성을 가진 다른 방법을 제시합니다.

우선 `Imports` 에 [generics](https://github.com/r-lib/generics) 패키지를 추가해야 합니다. [usethis](https://github.com/r-lib/usethis) 패키지를 사용할 것을 추천합니다:

```{r, eval = FALSE}
usethis::use_package("generics", "Imports")
```

다음으로, 적절한 타이디 메소드들을 다시 익스포트 해야합니다. 예를 들어 `glance()` 메소드를 다시 구현하려고 한다면, 당신 패키지의 `/R`  폴더 내부 어딘가에 다음을 추가하여 `glance()` 제네릭을 다시 익스포트할 수 있습니다:

```{r, eval = FALSE}
#' @importFrom generics glance
#' @export
generics::glance
```

특정 모델의 이러한 메소드들을 정의하는 것이 적절하지 않은 경우가 있습니다. 이런 경우에는 적절한 메소드만 구현하세요.

{{% warning %}} Please do not define `tidy()`, `glance()`, or `augment()` generics in your package. This will result in namespace conflicts whenever your package is used along other packages that also export tidying methods. {{%/ warning %}}

## 타이디 메소드를 구현하기

위 단계에서 익스포트한 제네릭 각각에 대한 타이디 메소드들을 구현해야 합니다. `tidy()`, `glance()`, and `augment()` 각각에 대해, 큰 그림, 예시, 유용한 자원들을 살펴볼 것입니다.

여기서 베이스 R 데이터셋 `trees` 를 사용할 것인데, 이 데이터셋의 나무 둘레 (Girth, 인치단위), 키 (Height, 피트단위), 부피 (Volume, 큐빅피트단위) 으로 베이스 R `lm()` 함수를 사용하여 선형모형을 예로 적합할 것입니다. 

```{r}
# load in the trees dataset
data(trees)

# take a look!
str(trees)

# fit the timber volume as a function of girth and height
trees_model <- lm(Volume ~ Girth + Height, data = trees)
```

`trees_model` 적합결과의 `summary()` 를 살펴봅시다.

```{r}
summary(trees_model)
```

This output gives some summary statistics on the residuals (which would be described more fully in an `augment()` output), model coefficients (which, in this case, make up the `tidy()` output), and some model-level summarizations such as RSE, $R^2$, etc. (which make up the `glance()` output.)

### `tidy()` 메소드 구현하기

`tidy(x, ...)` 메소드는 티블을 반환할 것인데, 이 티블의 각 행은 모델 구성요소에 대한 정보를 포함합니다. `x` 인풋은 모델 객체이고 점들 (`...`) 은 당신의 메소드 내부의 호출에 추가적인 정보를 제공하는 선택적 인수입니다. 새로운 `tidy()` 메소드는 추가적인 인수들을 취할 수 있지만 제네릭 함수와 호환되어야 하기 때문에 `x` 와 `...` 인수들을 포함 __해야합니다__. (For a glossary of currently acceptable additional arguments, see [the end of this article](#glossary).)  모델 구성요소들의 예로는 회귀 계수 (회귀 모델의 경우) 클러스터 (분류/클러스터 모델들) 등입니다. 이러한 `tidy()` 메소드들은 모델 세부사항들을 살펴보고 커스텀 모델 시각화를 생성하는 데에 유용합니다.

목재 부피에 관한 선형 모형 예로 돌아가서, 모델 구성요소에 관한 정보를 추출하려고 합니다. 이 예에서, 구성요소는 회귀 계수들입니다. 모델 객체와 이에 대한 `summary()` 를 살펴보면 다음과 같이 회귀 계수를 추출할 수 있음을 알 수 있을 것입니다:

```{r}
summary(trees_model)$coefficients
```

이 객체는 테이블 형태로 모델 계수를 포함하는데, 각 행에서 어떤 계수가 기술되는지에 관한 정보가 행 이름에 나와있습니다. 행 이름이 하나의 열에 포함된 티블로 변환시키려면 다음과 같이 작성하면 됩니다:

```{r}
trees_model_tidy <- summary(trees_model)$coefficients %>% 
  as_tibble(rownames = "term")

trees_model_tidy
```

broom 패키지는 계수들을 기술하는 공통된 열 이름을 표준화합니다. 이 경우, 열 이름은 다음과 같습니다:

```{r}
colnames(trees_model_tidy) <- c("term", "estimate", "std.error", "statistic", "p.value")
```

`tidy()` 메소드 출력으로 인정되는 열 이름들이 포함된 용어집(glossary)은 [이 문서의 마지막에](#glossary) 있습니다. 쉬운 법칙으로, `tidy()` 메소드가 제공할 열이름은 모두 소문자이어야 하고, 알파벳, 숫자, 점 외에는 포함해서는 안됩니다 (비록 예외가 많이 있습니다).

Finally, it is common for `tidy()` methods to include an option to calculate confidence/credible intervals for each component based on the model, when possible. In this example, the `confint()` function can be used to calculate confidence intervals from a model object resulting from `lm()`:

```{r}
confint(trees_model)
```

앞에서 살펴본 것들을 고려하여, `lm()` 의 적절한 `tidy()` 메소드는 예를 들어 다음과 같이 할 수 있습니다:

```{r, eval = FALSE}
tidy.lm <- function(x, conf.int = FALSE, conf.level = 0.95, ...) {
  
  result <- summary(x)$coefficients %>%
    tibble::as_tibble(rownames = "term") %>%
    dplyr::rename(estimate = Estimate,
                  std.error = `Std. Error`,
                  statistic = `t value`,
                  p.value = `Pr(>|t|)`)
  
  if (conf.int) {
    ci <- confint(x, level = conf.level)
    result <- dplyr::left_join(result, ci, by = "term")
  }
  
  result
}
```

{{% note %}}  If you're interested, the actual `tidy.lm()` source can be found [here](https://github.com/tidymodels/broom/blob/master/R/stats-lm-tidiers.R)! It's not too different from the version above except for some argument checking and additional columns. {{%/ note %}}

With this method exported, then, if a user calls `tidy(fit)`, where `fit` is an output from `lm()`, the `tidy()` generic would "redirect" the call to the `tidy.lm()` function above.

Some things to keep in mind while writing your `tidy()` method:

* Sometimes a model will have several different types of components. For example, in mixed models, there is different information associated with fixed effects and random effects. Since this information doesn't have the same interpretation, it doesn't make sense to summarize the fixed and random effects in the same table. In cases like this you should add an argument that allows the user to specify which type of information they want. For example, you might implement an interface along the lines of:

```{r eval = FALSE}
model <- mixed_model(...)
tidy(model, effects = "fixed")
tidy(model, effects = "random")
```

* How are missing values encoded in the model object and its `summary()`? Ensure that rows are included even when the associated model component is missing or rank deficient.
* Are there other measures specific to each component that could reasonably be expected to be included in their summarizations? Some common arguments to `tidy()` methods include:
  - `conf.int`: A logical indicating whether or not to calculate confidence/credible intervals. This should default to `FALSE`.
  - `conf.level`: The confidence level to use for the interval when `conf.int = TRUE`. Typically defaults to `.95`.
  - `exponentiate`: A logical indicating whether or not model terms should be presented on an exponential scale (typical for logistic regression).

### `glance()` 메소드 구현하기

`glance()` returns a one-row tibble providing model-level summarizations (e.g. goodness of fit measures and related statistics). This is useful to check for model misspecification and to compare many models. Again, the `x` input is a model object, and the `...` is an optional argument to supply additional information to any calls inside your method. New `glance()` methods can also take additional arguments and _must_ include the `x` and `...` arguments. (For a glossary of currently acceptable additional arguments, see [the end of this article](#glossary).)

`trees_model` 예로 돌아와서, 다음의 코드로 $R^2$ 값을 추출할 수 있을 것이다:

```{r}
summary(trees_model)$r.squared
```

Similarly, for the adjusted $R^2$:

```{r}
summary(trees_model)$adj.r.squared
```

Unfortunately, for many model objects, the extraction of model-level information is largely a manual process. You will likely need to build a `tibble()` element-by-element by subsetting the `summary()` object repeatedly. The `with()` function, however, can help make this process a bit less tedious by evaluating expressions inside of the `summary(trees_model)` environment. To grab those those same two model elements from above using `with()`:

```{r}
with(summary(trees_model),
     tibble::tibble(r.squared = r.squared,
                    adj.r.squared = adj.r.squared))
```

A reasonable `glance()` method for `lm()`, then, might look something like:

```{r, eval = FALSE}
glance.lm <- function(x, ...) {
  with(
    summary(x),
    tibble::tibble(
      r.squared = r.squared,
      adj.r.squared = adj.r.squared,
      sigma = sigma,
      statistic = fstatistic["value"],
      p.value = pf(
        fstatistic["value"],
        fstatistic["numdf"],
        fstatistic["dendf"],
        lower.tail = FALSE
      ),
      df = fstatistic["numdf"],
      logLik = as.numeric(stats::logLik(x)),
      AIC = stats::AIC(x),
      BIC = stats::BIC(x),
      deviance = stats::deviance(x),
      df.residual = df.residual(x),
      nobs = stats::nobs(x)
    )
  )
}
```

{{% note %}} This is the actual definition of `glance.lm()` provided by broom! {{%/ note %}}

Some things to keep in mind while writing `glance()` methods:
* Output should not include the name of the modeling function or any arguments given to the modeling function.
* In some cases, you may wish to provide model-level diagnostics not returned by the original object. For example, the above `glance.lm()` calculates `AIC` and `BIC` from the model fit. If these are easy to compute, feel free to add them. However, tidier methods are generally not an appropriate place to implement complex or time consuming calculations.
* The `glance` method should always return the same columns in the same order when given an object of a given model class. If a summary metric (such as `AIC`) is not defined in certain circumstances, use `NA`.

### `augment()` 메소드 구현하기

`augment()` methods add columns to a dataset containing information such as fitted values, residuals or cluster assignments. All columns added to a dataset have a `.` prefix to prevent existing columns from being overwritten. (Currently acceptable column names are given in [the glossary](#glossary).) The `x` and `...` arguments share their meaning with the two functions described above. `augment` methods also optionally accept a `data` argument that is a `data.frame` (or `tibble`) to add observation-level information to, returning a `tibble` object with the same number of rows as `data`. Many `augment()` methods also accept a `newdata` argument, following the same conventions as the `data` argument, except with the underlying assumption that the model has not "seen" the data yet. As a result, `newdata` arguments need not contain the response columns in `data`. Only one of `data` or `newdata` should be supplied. A full glossary of acceptable arguments to `augment()` methods can be found at [the end of this article](#glossary).

If a `data` argument is not specified, `augment()` should try to reconstruct the original data as much as possible from the model object. This may not always be possible, and often it will not be possible to recover columns not used by the model.

With this is mind, we can look back to our `trees_model` example. For one, the `model` element inside of the `trees_model` object will allow us to recover the original data:

```{r, rows.print=5}
trees_model$model
```

Similarly, the fitted values and residuals can be accessed with the following code:

```{r}
head(trees_model$fitted.values)
head(trees_model$residuals)
```

As with `glance()` methods, it's fine (and encouraged!) to include common metrics associated with observations if they are not computationally intensive to compute. A common metric associated with linear models, for example, is the standard error of fitted values:

```{r}
se.fit <- predict(trees_model, newdata = trees, se.fit = TRUE)$se.fit %>%
  unname()

head(se.fit)
```

Thus, a reasonable `augment()` method for `lm` might look something like this:

```{r}
augment.lm <- function(x, data = x$model, newdata = NULL, ...) {
  if (is.null(newdata)) {
    dplyr::bind_cols(tibble::as_tibble(data),
                     tibble::tibble(.fitted = x$fitted.values,
                                    .se.fit = predict(x, 
                                                      newdata = data, 
                                                      se.fit = TRUE)$se.fit,
                                   .resid =  x$residuals))
  } else {
    predictions <- predict(x, newdata = newdata, se.fit = TRUE)
    dplyr::bind_cols(tibble::as_tibble(newdata),
                     tibble::tibble(.fitted = predictions$fit,
                                    .se.fit = predictions$se.fit))
  }
}
```

Some other things to keep in mind while writing `augment()` methods:
* The `newdata` argument should default to `NULL`. Users should only ever specify one of `data` or `newdata`. Providing both `data` and `newdata` should result in an error. The `newdata` argument should accept both `data.frame`s and `tibble`s.
* Data given to the `data` argument must have both the original predictors and the original response. Data given to the `newdata` argument only needs to have the original predictors. This is important because there may be important information associated with training data that is not associated with test data. This means that the `original_data` object in `augment(model, data = original_data)` should provide `.fitted` and `.resid` columns (in most cases), whereas `test_data` in `augment(model, data = test_data)` only needs a `.fitted` column, even if the response is present in `test_data`.
* If the `data` or `newdata` is specified as a `data.frame` with rownames, `augment` should return them in a column called `.rownames`.
* For observations where no fitted values or summaries are available (where there's missing data, for example), return `NA`.
* *The `augment()` method should always return as many rows as were in `data` or `newdata`*, depending on which is supplied

{{% note %}} The recommended interface and functionality for `augment()` methods may change soon. {{%/ note %}}

## Document the new methods

The only remaining step is to integrate the new methods into the parent package! To do so, just drop the methods into a `.R` file inside of the `/R` folder and document them using roxygen2. If you're unfamiliar with the process of documenting objects, you can read more about it [here](http://r-pkgs.had.co.nz/man.html). Here's an example of how our `tidy.lm()` method might be documented:

```{r, eval = FALSE}
#' Tidy a(n) lm object
#'
#' @param x A `lm` object.
#' @param conf.int Logical indicating whether or not to include 
#'   a confidence interval in the tidied output. Defaults to FALSE.
#' @param conf.level The confidence level to use for the confidence 
#'   interval if conf.int = TRUE. Must be strictly greater than 0 
#'   and less than 1. Defaults to 0.95, which corresponds to a 
#'   95 percent confidence interval.
#' @param ... Unused, included for generic consistency only.
#' @return A tidy [tibble::tibble()] summarizing component-level
#'   information about the model
#'
#' @examples
#' # load the trees dataset
#' data(trees)
#' 
#' # fit a linear model on timber volume
#' trees_model <- lm(Volume ~ Girth + Height, data = trees)
#'
#' # summarize model coefficients in a tidy tibble!
#' tidy(trees_model)
#'
#' @export
tidy.lm <- function(x, conf.int = FALSE, conf.level = 0.95, ...) {

  # ... the rest of the function definition goes here!
```

Once you've documented each of your new methods and executed `devtools::document()`, you're done! Congrats on implementing your own broom tidier methods for a new model object!

## Glossaries: argument and column names {#glossary}

```{r, include = FALSE}
# grab the argument glossary: make a temporary file, write the
# data to it, load it, and then delete it
args_url <- "https://github.com/alexpghayes/modeltests/blob/master/data/argument_glossary.rda?raw=true"
args_file <- tempfile()
args_get <- httr::GET(args_url)
httr::stop_for_status(args_get)
writeBin(httr::content(args_get, type = "raw"), args_file)
load(args_file)
unlink(args_file)

# do the same thing for the columns
cols_url <- "https://github.com/alexpghayes/modeltests/blob/master/data/column_glossary.rda?raw=true"
cols_file <- tempfile()
cols_get <- httr::GET(cols_url)
httr::stop_for_status(cols_get)
writeBin(httr::content(cols_get, type = "raw"), cols_file)
load(cols_file)
unlink(cols_file)
```

Tidier methods have a standardized set of acceptable argument and output column names. The currently acceptable argument names by tidier method are:

```{r, echo = FALSE}
argument_glossary %>%
  select(Method = method, Argument = argument) %>%
  knitr::kable() %>%
  kable_styling(full_width = FALSE)
```

The currently acceptable column names by tidier method are:

```{r, echo = FALSE}
column_glossary %>%
  select(Method = method, Column = column) %>%
  knitr::kable() %>%
  kable_styling(full_width = FALSE)
```

The [alexpghayes/modeltests](https://github.com/alexpghayes/modeltests) package provides unit testing infrastructure to check your new tidier methods. Please file an issue there to request new arguments/columns to be added to the glossaries!

## Session information

```{r si, echo = FALSE}
small_session(pkgs)
```
